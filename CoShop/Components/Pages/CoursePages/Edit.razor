@page "/courses/edit"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@using CoShop.Data
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Курс</h2>
<hr />
@if (Course is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Course.Id" value="@Course.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Название:</label>
                    <InputText id="title" @bind-Value="Course.Title" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Course.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание:</label>
                    <InputText id="description" @bind-Value="Course.Description" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Course.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Цена:</label>
                    <InputNumber id="price" @bind-Value="Course.Price" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Course.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">Дата создания:</label>
                    <InputDate id="createdat" @bind-Value="Course.CreatedAt" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Course.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="CatId" class="form-label">Категория:</label>
                    <InputSelect id="categoryId" @bind-Value="Course.CatId" class="form-control">
                        <option value="">Выберите категорию...</option>
                        @if (Cats != null)
                        {
                            @foreach (var category in Cats)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Course.CatId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="imageurl" class="form-label">Путь к изображению:</label>
                    <InputText id="imageurl" @bind-Value="Course.ImageUrl" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Course.ImageUrl" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/courses">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Course? Course { get; set; }

    public List<Cat>? Cats { get; set; }

    protected override void OnInitialized()
    {
        Cats = dbContext.Cats.OrderBy(p => p.Name).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Course ??= await context.Courses.FirstOrDefaultAsync(m => m.Id == Id);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Course!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CourseExists(Course!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    private bool CourseExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Courses.Any(e => e.Id == id);
    }
}
