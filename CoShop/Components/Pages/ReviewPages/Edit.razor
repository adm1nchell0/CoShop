@page "/reviews/edit"
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Review</h2>
<hr />
@if (Review is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Review" OnValidSubmit="UpdateReview" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Review.Id" value="@Review.Id" />
                <div class="mb-3">
                    <label for="courseid" class="form-label">CourseId:</label>
                    <InputNumber id="courseid" @bind-Value="Review.CourseId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.CourseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="polzoid" class="form-label">PolzoId:</label>
                    <InputNumber id="polzoid" @bind-Value="Review.PolzoId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.PolzoId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rating" class="form-label">Rating:</label>
                    <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.Rating" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Comment:</label>
                    <InputText id="comment" @bind-Value="Review.Comment" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.Comment" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Review.CreatedAt" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.CreatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reviews">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Review? Review { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Review ??= await context.Reviews.FirstOrDefaultAsync(m => m.Id == Id);

        if (Review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Review!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ReviewExists(Review!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reviews");
    }

    private bool ReviewExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Reviews.Any(e => e.Id == id);
    }
}
