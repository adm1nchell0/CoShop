@page "/reviews/edit"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@using CoShop.Data
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Отзыв</h2>
<hr />
@if (Review is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Review" OnValidSubmit="UpdateReview" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Review.Id" value="@Review.Id" />
                <div class="mb-3">
                    <label for="CourseId" class="form-label">Курс:</label>
                    <InputSelect id="courseId" @bind-Value="Review.CourseId" class="form-control">
                        <option value="">Выберите курс...</option>
                        @if (Courses != null)
                        {
                            @foreach (var course in Courses)
                            {
                                <option value="@course.Id">@course.Title</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Review.CourseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="applicationUserId" class="form-label">ID Пользователя:</label>
                    <InputText id="applicationUserId" @bind-Value="Review.ApplicationUserId" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Review.ApplicationUserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rating" class="form-label">Оценка:</label>
                    <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Review.Rating" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Комментарий:</label>
                    <InputTextArea id="comment" @bind-Value="Review.Comment" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Review.Comment" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdAt" class="form-label">Дата создания:</label>
                    <InputDate id="createdAt" @bind-Value="Review.CreatedAt" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Review.CreatedAt" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reviews">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Review? Review { get; set; }

    public List<Course>? Courses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Review ??= await context.Reviews.FirstOrDefaultAsync(m => m.Id == Id);

        if (Review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Courses = await dbContext.Courses.OrderBy(p => p.Title).ToListAsync();
    }

    private async Task UpdateReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Review!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ReviewExists(Review!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reviews");
    }

    private bool ReviewExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Reviews.Any(e => e.Id == id);
    }
}
