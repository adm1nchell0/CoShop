@page "/course/{courseId:int}"
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@using CoShop.Data
@using System.Security.Claims
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Подробности курса</PageTitle>

@if (course == null)
{
    <p>Курс не найден.</p>
}
else
{
    <div class="container">
        <div class="w-100" style="background-image: url('/images/@course.ImageUrl'); background-size: cover; background-position: center; border-radius: 20px; ">
            <div class="bg-overlay row justify-content-between w-100" style="padding: 40px 20px; height: 180px; border-radius: 20px; margin: 0 auto;">
                <div class="text-light col-md-6 d-flex align-items-start flex-column">
                    <h4 class="mb-auto">@course.Title</h4>
                    <p class="mt-0 mb-0">@course.Description</p>
                </div>
                <div class="col-md-4 d-flex align-items-start flex-column">
                    <div class="row w-100" style="margin: 0 auto auto;">
                        <div class="p-0 col-md-6 align-items-center d-flex">
                            <h5 style="margin-bottom: 0px; margin-right: 20px;">Цена</h5>
                            <p class="mb-0" style="font-size: 25px;">@course.Price $</p>
                        </div>
                        <div class="p-0 col-md-6 align-items-center d-flex justify-content-end">
                            <h5 style="margin-bottom: 0px; margin-right: 20px;">Рейтинг</h5>
                            <p class="mb-0" style="font-size: 25px;">@GetAverageRating()</p>
                        </div>
                    </div>
                    <div class="w-100 m-0 align-items-center d-flex justify-content-between">
                        <h5 class="m-0">Длительность обучения</h5>
                        <p class="mb-0" style="font-size: 25px;">@GetTotalDuration()</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-group mt-3">
            <h5 class="mt-3 mb-2 font-weight-bold">Уроки</h5>
            @foreach (var lesson in course.Lessons)
            {
                <div class="col-md-12 mb-3">
                    <div class="card border-0">
                        <div class="d-flex card-body justify-content-between align-items-center" style="background-color: #e6e6e6; padding: 20px; border-radius: 20px">
                            <div>
                                <h6 class="card-title">@lesson.Title</h6>
                                <p class="card-text">@lesson.Content</p>
                            </div>
                            <p class="card-text">Длительность: @lesson.Duration</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="p-2 mt-2 mb-3 card-group-2 d-flex justify-content-center">
            <div class="p-0 align-items-center d-flex">
                <h5 style="margin-bottom: 0px; margin-right: 20px;">Цена</h5>
                <p class="mb-0" style="font-size: 25px;">@course.Price $</p>
            </div>
            @if (showSuccessMessage)
            {
                <div class="alert alert-success" role="alert">
                    Покупка успешно завершена!
                </div>
            }
            @if (user.Identity?.IsAuthenticated == true)
            {
                <button @onclick="CreateOrder" class="btn btn-primary btn-radius-custom custom-btn" style="border-radius: 15px; margin-left: 20px; padding: 10px 25px;">Купить</button>
            }
            else
            {
                <p>Пожалуйста, войдите в систему, чтобы купить курс.</p>
            }
        </div>
        <div class="">
            <h5 class="mt-3 mb-2 font-weight-bold">Отзывы</h5>
            @foreach (var review in course.Reviews)
            {
                <div class="col-md-12 mb-3">
                    <div class="card border-0">
                        <div class="d-flex card-body justify-content-between align-items-center" style="background-color: #e6e6e6; padding: 20px; border-radius: 20px">
                            <div>
                                <p class="card-text">Оценка: @review.Rating</p>
                                <h6 class="card-title">@review.Comment</h6>
                                <p class="card-text">Дата: @review.CreatedAt.ToString("dd MMMM yyyy")</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<style>
    .bg-overlay {
        background: rgba(0, 0, 0, 0.25); /* Полупрозрачный черный фон для текста */
        color: white !important;
        border-radius: 15px;
        height: 100%; /* Увеличение высоты карточки */
    }
</style>

@code {
    [Parameter]
    public int CourseId { get; set; }

    private ApplicationDbContext context = default!;
    private Course? course = null;
    private bool showSuccessMessage = false;
    private AuthenticationState authState;
    private ClaimsPrincipal user;

    protected override async Task OnParametersSetAsync()
    {
        context = DbFactory.CreateDbContext();
        course = await context.Courses
            .Include(c => c.Lessons)
            .Include(c => c.Reviews) // Включаем отзывы
            .FirstOrDefaultAsync(c => c.Id == CourseId);

        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private string GetTotalDuration()
    {
        TimeSpan totalDuration = TimeSpan.Zero;
        foreach (var lesson in course.Lessons)
        {
            totalDuration += TimeSpan.Parse(lesson.Duration);
        }
        return totalDuration.ToString(@"hh\:mm\:ss");
    }

    private double GetAverageRating()
    {
        var reviews = dbContext.Reviews.Where(r => r.CourseId == CourseId).ToList();
        if (reviews.Count == 0) return 0;
        return reviews.Average(r => r.Rating);
    }

    private async Task CreateOrder()
    {
        if (course == null)
        {
            return;
        }

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (userId is not null)
            {
                var order = new Order
                    {
                        ApplicationUserId = userId,
                        CourseId = course.Id,
                        OrderDate = DateTime.Now,
                    };

                using var context = DbFactory.CreateDbContext();
                context.Orders.Add(order);
                await context.SaveChangesAsync();

                showSuccessMessage = true;
                StateHasChanged(); // Обновляем состояние компонента
            }
        }
        else
        {
            // Пользователь не авторизован
            Console.WriteLine("Пользователь не авторизован. Покупка невозможна.");
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
