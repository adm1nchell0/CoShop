@page "/lessons/delete"
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Lesson</h2>
    <hr />
    @if (lesson is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@lesson.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@lesson.Content</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CourseId</dt>
            <dd class="col-sm-10">@lesson.CourseId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Duration</dt>
            <dd class="col-sm-10">@lesson.Duration</dd>
        </dl>
        <EditForm method="post" Model="lesson" OnValidSubmit="DeleteLesson" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(lesson is null)">Delete</button> |
            <a href="/lessons">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Lesson? lesson;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        lesson = await context.Lessons.FirstOrDefaultAsync(m => m.Id == Id);

        if (lesson is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLesson()
    {
        using var context = DbFactory.CreateDbContext();
        context.Lessons.Remove(lesson!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/lessons");
    }
}
