@page "/lessons/create"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@using CoShop.Data
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext

<PageTitle>Создать</PageTitle>

<h1>Создать</h1>

<h2>Урок</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Lesson" OnValidSubmit="AddLesson" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="title" class="form-label">Название:</label>
                <InputText id="title" @bind-Value="Lesson.Title" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Lesson.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="content" class="form-label">Содержание:</label>
                <InputText id="content" @bind-Value="Lesson.Content" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Lesson.Content" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="CourseId" class="form-label">Курс:</label>
                <InputSelect id="courseId" @bind-Value="Lesson.CourseId" class="form-control">
                    <option value="">Выберите курс...</option>
                    @if (Courses != null)
                    {
                        @foreach (var course in Courses)
                        {
                            <option value="@course.Id">@course.Title</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Lesson.CourseId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="duration" class="form-label">Продолжительность:</label>
                <InputText id="duration" @bind-Value="Lesson.Duration" class="form-control" aria-required="true" placeholder="00:00:00" />
                <ValidationMessage For="() => Lesson.Duration" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/lessons">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Lesson Lesson { get; set; } = new();

    public List<Course>? Courses { get; set; }

    protected override void OnInitialized()
    {
        Courses = dbContext.Courses.OrderBy(p => p.Title).ToList();
    }

    // Защита от атак чрезмерного заполнения, см. https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddLesson()
    {
        using var context = DbFactory.CreateDbContext();

        // Преобразование строки в TimeSpan (если это необходимо)
        if (!string.IsNullOrWhiteSpace(Lesson.Duration) && !TimeSpan.TryParse(Lesson.Duration, out TimeSpan duration))
        {
            // Можно добавить логику обработки ошибки, если Duration не в правильном формате
            // Например, можно установить значение по умолчанию или отобразить сообщение об ошибке.
            // В этом месте можно вернуть сообщение, если Duration невалидна.
            return; // Прекращаем выполнение, если Duration невалидна
        }

        // Сохранение нового урока в базу данных
        context.Lessons.Add(Lesson);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/lessons");
    }
}
