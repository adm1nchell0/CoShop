@page "/lessons/edit"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@using CoShop.Data
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext dbContext

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Урок</h2>
<hr />
@if (Lesson is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Lesson" OnValidSubmit="UpdateLesson" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Lesson.Id" value="@Lesson.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Название:</label>
                    <InputText id="title" @bind-Value="Lesson.Title" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Lesson.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="content" class="form-label">Содержание:</label>
                    <InputText id="content" @bind-Value="Lesson.Content" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Lesson.Content" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="CourseId" class="form-label">Курс:</label>
                    <InputSelect id="courseId" @bind-Value="Lesson.CourseId" class="form-control">
                        <option value="">Выберите курс...</option>
                        @if (Courses != null)
                        {
                            @foreach (var course in Courses)
                            {
                                <option value="@course.Id">@course.Title</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Lesson.CourseId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="duration" class="form-label">Продолжительность:</label>
                    <InputText id="duration" @bind-Value="Lesson.Duration" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Lesson.Duration" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/lessons">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Lesson? Lesson { get; set; }

    public List<Course>? Courses { get; set; }

    protected override void OnInitialized()
    {
        Courses = dbContext.Courses.OrderBy(p => p.Title).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Lesson ??= await context.Lessons.FirstOrDefaultAsync(m => m.Id == Id);

        if (Lesson is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateLesson()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Lesson!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LessonExists(Lesson!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/lessons");
    }

    private bool LessonExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Lessons.Any(e => e.Id == id);
    }
}
