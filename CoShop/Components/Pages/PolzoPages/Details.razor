@page "/polzos/details"
@using Microsoft.EntityFrameworkCore
@using CoShop.Models
@inject IDbContextFactory<CoShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Polzo</h2>
    <hr />
    @if (polzo is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Surname</dt>
            <dd class="col-sm-10">@polzo.Surname</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@polzo.Name</dd>
            <dt class="col-sm-2">Patronymic</dt>
            <dd class="col-sm-10">@polzo.Patronymic</dd>
            <dt class="col-sm-2">PolId</dt>
            <dd class="col-sm-10">@polzo.PolId</dd>
            <dt class="col-sm-2">DateBirth</dt>
            <dd class="col-sm-10">@polzo.DateBirth</dd>
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@polzo.Phone</dd>
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@polzo.CreatedAt</dd>
        </dl>
        <div>
            <a href="@($"/polzos/edit?id={polzo.Id}")">Edit</a> |
            <a href="@($"/polzos")">Back to List</a>
        </div>
    }
</div>

@code {
    private Polzo? polzo;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        polzo = await context.Polzos.FirstOrDefaultAsync(m => m.Id == Id);

        if (polzo is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
